LOGIN
add an email column to the users table CHECK

add email input to registration modal CHECK

make a php file to deal with the email

figure out forgot password and forgot username in regards to email and resetting password

blurb about the site and what its for

footer with links to my github account linkedin and any others

my logo displayed in the footer CHECK

HOME
place where user can input url or callsign of youtube account, which would go into a database

list of all creators saved in their homepage, list of videos that the user has watched from url or title and 
possibly a photo or their logo

each creator should maybe have their own box with pic and information

different 1-5 star ratings(likability, pity, sassy, nice, loud, quiet, etc)

place for notes on the creator and order them

date the creator was added with ability to estimate when they subscribed 

how long ago was the creators last video released maybe an average of how often they upload

search bar to find creator easily go to that part of the page

maybe search bar to suggest other creators that are reacting to an artist you like(with view counts and likes)

PENTATONIX
make column that lists all ptx videos

a column that lists all the songs a reactor has listened to. move from list of videos on click

have section with lists/genres of ptx videos( best to start with, different moods, most popular, etc)

best practices for reacting to ptx (copyright, how to avoid, blur, opacity, pausings, etc)

blurb about the band(how started with sing off, avi leaving, matt joining, etc)

lists of superfruit videos solo projects and other side projects

from validate_email import validate_email

# Ensure email was submitted
if not request.form.get("email"):
    return apology("must provide email", 403)

# Ensure email is valid
elif not validate_email(request.form.get("email")):
    return apology("invalid email", 403)


# Generate password hash using bcrypt for registation route
        username = request.form.get("username")
        password = request.form.get("password")


        password_hash = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

        # Save the username and password hash in the database
        c.execute("INSERT INTO users (username, password_hash) VALUES (?, ?)", (username, password_hash))
        # Commit the transaction to save the changes

#for login route
        username = request.form.get("login-username")
        password = request.form.get("login-password")

        # Query database for user
        c.execute("SELECT * FROM users WHERE username = ?", (username,))
        user = c.fetchone()

        # Ensure username exists and password is correct
        if not user or not bcrypt.checkpw(password.encode('utf-8'), user[2]):
            return apology("invalid username and/or password", 403)        



