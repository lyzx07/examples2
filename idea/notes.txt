LOGIN
add an email column to the users table CHECK

add email input to registration modal CHECK

add code to deal with the email CHECK

figure out forgot password and forgot username in regards to email and resetting password

blurb about the site and what its for

footer with links to my github account linkedin and any others CHECK

my logo displayed in the footer CHECK

HOME
place where user can input url or callsign of youtube account, which would go into a database CHECK

list of all creators saved in their homepage CHECK

each creator should maybe have their own box with pic and information CHECK

different 1-10 star ratings(likability, pity, sassy, nice, loud, quiet, etc) CHECK

place for notes on the creator and order them CHECK

date the creator was added

how long ago was the creators last video released CHECK 

maybe an average of how often they upload

search bar to find creator easily go to that part of the page (MODIFIED WITH A LINK AND LIST OF CREATORS)

PENTATONIX
text-underline-offset change borders used as underlines 

make columns that lists all ptx videos

a column that lists all the songs a reactor has listened to. move from list of videos on click CHECK

have section with lists/genres of ptx videos( best to start with, different moods, most popular, etc) MOSTLY

best practices for reacting to ptx (copyright, how to avoid, blur, opacity, pausings, etc)

blurb about the band(how started with sing off, avi leaving, matt joining, etc) MOSTLY

lists of superfruit videos solo projects and other side projects MOSTLY

change refresh text to tool tip when hovering

from validate_email import validate_email

# Ensure email was submitted
if not request.form.get("email"):
    return apology("must provide email", 403)

# Ensure email is valid
elif not validate_email(request.form.get("email")):
    return apology("invalid email", 403)


# Generate password hash using bcrypt for registation route
        username = request.form.get("username")
        password = request.form.get("password")


        password_hash = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

        # Save the username and password hash in the database
        c.execute("INSERT INTO users (username, password_hash) VALUES (?, ?)", (username, password_hash))
        # Commit the transaction to save the changes

#for login route
        username = request.form.get("login-username")
        password = request.form.get("login-password")

        # Query database for user
        c.execute("SELECT * FROM users WHERE username = ?", (username,))
        user = c.fetchone()

        # Ensure username exists and password is correct
        if not user or not bcrypt.checkpw(password.encode('utf-8'), user[2]):
            return apology("invalid username and/or password", 403)        

<!-- HTML !-->
<button class="button-13" role="button">Button 13</button>

/* CSS */
.dropdown {
  background-color: #fff;
  border: 1px solid #d5d9d9;
  border-radius: 8px;
  box-shadow: rgba(213, 217, 217, .5) 0 2px 5px 0;
  box-sizing: border-box;
  color: #0f1111;
  cursor: pointer;
  display: inline-block;
  font-family: "Amazon Ember",sans-serif;
  font-size: 13px;
  line-height: 29px;
  padding: 0 10px 0 11px;
  position: relative;
  text-align: center;
  text-decoration: none;
  user-select: none;
  -webkit-user-select: none;
  touch-action: manipulation;
  vertical-align: middle;
  width: 100px;
}

.dropdown:hover {
  background-color: #f7fafa;
}

.dropdown:focus {
  border-color: #008296;
  box-shadow: rgba(213, 217, 217, .5) 0 2px 5px 0;
  outline: 0;
}

